stringsAsFactors=FALSE)
a1 <- c("A" = 1, "B" = 2)
a2 <- c("A" = 2, "B" = 1)
rbind(a1, a2)
seq(mydata$startdatetime[1], mydata$enddatetime[nrow(mydata)], by = "days")
dmy(seq(mydata$startdatetime[1], mydata$enddatetime[nrow(mydata)], by = "days"))
ymd(seq(mydata$startdatetime[1], mydata$enddatetime[nrow(mydata)], by = "days"))
?seq.Date
format(seq(mydata$startdatetime[1], mydata$enddatetime[nrow(mydata)], by = "days"), "%Y/%m/%d")
format(seq(mydata$startdatetime[1], mydata$enddatetime[nrow(mydata)], by = "days"), "%Y-%m-%d")
out_df <- data.frame(
day = format(seq(mydata$startdatetime[1], mydata$enddatetime[nrow(mydata)], by = "days"), "%Y-%m-%d")
)
out_df
t(out_df)
out_df
mydata
profvis::profvis({
pmap_dfr(mydata, ~ {
hours       <- abs(as.numeric(difftime(..1, ..2, units = "hours")))
day_seq     <- seq(as_date(..1), as_date(..2), by = "days")
hours_start <- hour(..1) + minute(..1) / 60
hours_end   <- hour(..2) + minute(..2) / 60
production  <- c(
..4 * (24 - hours_start) / hours,
rep(..4 * 24 / hours, max(length(day_seq) - 2, 0)),
..4 * hours_end / hours
)
tibble(
day = day_seq,
amount = production,
type = ..3
)
}) %>%
group_by(day, type) %>%
summarise(amount = sum(amount)) %>%
spread(type, amount) %>%
replace_na(list(prod1 = 0, prod2 = 0))
})
library(ggplot2)
library(ggbeeswarm)
library(ggpol)
ggplot(iris, aes(y = Petal.Width)) +
geom_boxjitter(jitter.shape = NA,
jitter.color = NA,
jitter.height = 0,
jitter.width = 0,
outlier.color = NA,
errorbar.draw = TRUE) +
geom_quasirandom(
aes(x = 1, color = Species),
width = 0.25,
size = 2,
groupOnX = TRUE, alpha = 0.7) +
scale_color_brewer(palette = 'Set2') +
theme_classic()
#' A half boxplot
#'
#' @inheritParams ggplot2::geom_boxplot
#' @param errorbar.draw Draw horizontal whiskers at the top and bottom (the IQR). Defaults to `TRUE`.
#' @param errorbar.length Length of the horizontal whiskers (errorbar). Defaults to half the width of the half-boxplot
#' @param side The side of the half-geom, "l" for left and "r" for right, defaults to "l".
#' @param center Boolean whether to center the half-boxplot instead of aligning it to its respective side.
#' @importFrom ggplot2 layer position_dodge2 aes GeomSegment GeomCrossbar
#' @importFrom grid grobTree grobName
#' @export
geom_half_boxplot <- function(
mapping = NULL, data = NULL,
stat = "boxplot", position = "dodge2",
...,
side = "l",
center = FALSE,
outlier.colour = NULL,
outlier.color = NULL,
outlier.fill = NULL,
outlier.shape = 19,
outlier.size = 1.5,
outlier.stroke = 0.5,
outlier.alpha = NULL,
notch = FALSE,
notchwidth = 0.5,
varwidth = FALSE,
errorbar.draw = TRUE,
errorbar.length = 0.5,
na.rm = FALSE,
show.legend = NA,
inherit.aes = TRUE) {
if (is.character(position)) {
if (varwidth == TRUE) position <- position_dodge2(preserve = "single")
} else {
if (identical(position$preserve, "total") & varwidth == TRUE) {
warning("Can't preserve total widths when varwidth = TRUE.", call. = FALSE)
position$preserve <- "single"
}
}
layer(
data = data,
mapping = mapping,
stat = stat,
geom = GeomHalfBoxplot,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(
side = side,
center = center,
outlier.colour = outlier.color %||% outlier.colour,
outlier.fill = outlier.fill,
outlier.shape = outlier.shape,
outlier.size = outlier.size,
outlier.stroke = outlier.stroke,
outlier.alpha = outlier.alpha,
notch = notch,
notchwidth = notchwidth,
varwidth = varwidth,
errorbar.draw = errorbar.draw,
errorbar.length = errorbar.length,
na.rm = na.rm,
...
)
)
}
#' @rdname gghalves-extensions
#' @format NULL
#' @usage NULL
#' @importFrom ggplot2 alpha ggproto GeomBoxplot aes GeomSegment GeomPoint GeomCrossbar resolution PositionJitter
#' @importFrom grid grobTree
#' @export
GeomHalfBoxplot <- ggproto("GeomHalfBoxplot", GeomBoxplot,
setup_data = function(data, params) {
GeomBoxplot$setup_data(data, params)
},
draw_group = function(
data, panel_params, coord, fatten = 2,
side = "l", center = FALSE,
outlier.colour = NULL, outlier.fill = NULL,
outlier.shape = 19, outlier.size = 1.5,
outlier.stroke = 0.5, outlier.alpha = NULL,
notch = FALSE, notchwidth = 0.5,
varwidth = FALSE, errorbar.draw = FALSE, errorbar.length = 0.5) {
if (nrow(data) != 1) {
stop(
"Can't draw more than one boxplot per group. Did you forget aes(group = ...)?",
call. = FALSE
)
}
xrange <- data$xmax - data$xmin
common <- data.frame(
colour = data$colour,
size = data$size,
linetype = data$linetype,
fill = alpha(data$fill, data$alpha),
group = data$group,
stringsAsFactors = FALSE
)
whiskers <- data.frame(
x = data$x,
xend = data$x,
y = c(data$upper, data$lower),
yend = c(data$ymax, data$ymin),
alpha = NA,
common,
stringsAsFactors = FALSE
)
# If Boxplot is centered, need to adjust whisker that is otherwise always at x
if (isTRUE(center)) {
if (side == "r") {
whiskers$x <- data$x + xrange / 4
} else {
whiskers$x <- data$x - xrange / 4
}
whiskers$xend <- whiskers$x
}
if (errorbar.draw) {
if (errorbar.length > 1 | errorbar.length < 0) {
stop("Error bar length must be between 0 and 1.")
}
error_length_add <- ((data$xmin + xrange / 2) - data$xmin)
error_length_add <- error_length_add * (1 - errorbar.length)
error_whiskers <- data.frame(
x = (data$xmin + xrange / 2),
xend = if (side == "r") data$xmax - error_length_add else data$xmin + error_length_add,
y = c(data$ymax, data$ymin),
yend = c(data$ymax, data$ymin),
alpha = NA,
common,
stringsAsFactors = FALSE
)
if (isTRUE(center)) {
error_whiskers$x <- data$x
if (side == "r") {
error_whiskers$xend <- data$xmax
} else {
error_whiskers$xend <- data$xmin
}
}
error_grob <- GeomSegment$draw_panel(error_whiskers, panel_params, coord)
} else {
error_grob <- NULL
}
box <- data.frame(
xmin = if (side == "r") data$xmax else data$xmin,
xmax = (data$xmin + xrange / 2),
ymin = data$lower,
y = data$middle,
ymax = data$upper,
ynotchlower = ifelse(notch, data$notchlower, NA),
ynotchupper = ifelse(notch, data$notchupper, NA),
notchwidth = notchwidth,
alpha = data$alpha,
common,
stringsAsFactors = FALSE
)
if (!is.null(data$outliers) && length(data$outliers[[1]] >= 1)) {
outliers <- ggplot2:::new_data_frame(list(
y = data$outliers[[1]],
x = data$x[1],
colour = outlier.colour %||% data$colour[1],
fill = outlier.fill %||% data$fill[1],
shape = outlier.shape %||% data$shape[1],
size = outlier.size %||% data$size[1],
stroke = outlier.stroke %||% data$stroke[1],
fill = NA,
alpha = outlier.alpha %||% data$alpha[1]
), n = length(data$outliers[[1]]))
if (isTRUE(center)) {
if (side == "r") {
outliers$x <- outliers$x + xrange / 4
} else {
outliers$x <- outliers$x - xrange / 4
}
}
outliers_grob <- GeomPoint$draw_panel(outliers, panel_params, coord)
} else {
outliers_grob <- NULL
}
tree <- grobTree(
outliers_grob,
error_grob,
GeomSegment$draw_panel(whiskers, panel_params, coord),
GeomCrossbar$draw_panel(box, fatten = fatten, panel_params, coord)
)
tree$name <- grid::grobName(tree, "geom_half_boxplot")
tree
}
)
library(grid)
ggplot(iris, aes(y = Petal.Width)) +
geom_half_boxplot(jitter.shape = NA,
jitter.color = NA,
jitter.height = 0,
jitter.width = 0,
outlier.color = NA,
errorbar.draw = TRUE) +
geom_quasirandom(
aes(x = 1, color = Species),
width = 0.25,
size = 2,
groupOnX = TRUE, alpha = 0.7) +
scale_color_brewer(palette = 'Set2') +
theme_classic()
ggplot(iris, aes(y = Petal.Width)) +
geom_half_boxplot() +
geom_quasirandom(
aes(x = 1, color = Species),
width = 0.25,
size = 2,
groupOnX = TRUE, alpha = 0.7) +
scale_color_brewer(palette = 'Set2') +
theme_classic()
ggplot(iris, aes(y = Petal.Width)) +
geom_half_boxplot() +
geom_quasirandom(
aes(x = 0, color = Species),
width = 0.25,
size = 2,
groupOnX = TRUE, alpha = 0.7) +
scale_color_brewer(palette = 'Set2') +
theme_classic()
ggplot(iris, aes(y = Petal.Width)) +
geom_half_boxplot() +
geom_quasirandom(
aes(x = 0.4, color = Species),
width = 0.25,
size = 2,
groupOnX = TRUE, alpha = 0.7) +
scale_color_brewer(palette = 'Set2') +
theme_classic()
ggplot(iris, aes(y = Petal.Width)) +
geom_half_boxplot() +
geom_quasirandom(
aes(x = 0.2, color = Species),
width = 0.25,
size = 2,
groupOnX = TRUE, alpha = 0.7) +
scale_color_brewer(palette = 'Set2') +
theme_classic()
ggplot(iris, aes(y = Petal.Width)) +
geom_half_boxplot() +
geom_quasirandom(
aes(x = 0.5, color = Species),
width = 0.25,
size = 2,
groupOnX = TRUE, alpha = 0.7) +
scale_color_brewer(palette = 'Set2') +
theme_classic()
ggplot(iris, aes(y = Petal.Width)) +
geom_half_boxplot() +
geom_quasirandom(
aes(x = 0.4, color = Species),
width = 0.25,
size = 2,
groupOnX = TRUE, alpha = 0.7) +
scale_color_brewer(palette = 'Set2') +
theme_classic()
ggplot(iris, aes(y = Petal.Width)) +
geom_boxplot()
ggplot(iris, aes(y = Petal.Width)) +
geom_boxplot(width = .1)
ggplot(iris, aes(y = Petal.Width)) +
geom_boxplot(width = .1) +
xlim(c(-1, 1))
ggplot(iris, aes(y = Petal.Width)) +
geom_boxplot(width = .2) +
xlim(c(-1, 1))
ggplot(iris, aes(y = Petal.Width)) +
geom_boxplot(width = .3) +
xlim(c(-1, 1))
ggplot(iris, aes(y = Petal.Width)) +
geom_half_boxplot(width = .3) +
xlim(c(-1, 1))
ggplot(iris, aes(y = Petal.Width)) +
geom_half_boxplot(width = .5) +
xlim(c(-1, 1))
ggplot(iris, aes(y = Petal.Width)) +
geom_boxjitter(width = .5) +
xlim(c(-1, 1))
ggplot(iris, aes(y = Petal.Width)) +
geom_boxjitter(width = .2) +
xlim(c(-1, 1))
ggplot(iris, aes(y = Petal.Width)) +
geom_boxjitter(width = .3) +
xlim(c(-1, 1))
ggplot(iris, aes(y = Petal.Width)) +
geom_boxjitter(width = .6) +
xlim(c(-1, 1))
devtools::install_github("erocoar/ggpol")
devtools::release("D:/onedrive/github/gghalves")
ggplot(iris, aes(y = Petal.Width)) +
geom_half_boxplot()
ggplot(iris, aes(x = Species, y = Petal.Width, fill = Species)) +
geom_half_boxplot()
ggplot(iris, aes(x = Species, y = Petal.Width, fill = Species)) +
geom_half_boxplot(side = "r")
ggplot(iris, aes(x = Species, y = Petal.Width, fill = Species)) +
geom_half_boxplot(center = TRUE)
ggplot(iris, aes(x = Species, y = Petal.Width, fill = Species)) +
geom_half_dotplot()
devtools::load_all("D:/onedrive/github/gghalves")
ggplot(iris, aes(x = Species, y = Petal.Width, fill = Species)) +
geom_half_dotplot()
ggplot(iris, aes(x = Species, y = Petal.Width, fill = Species)) +
geom_half_dotplot(width = .5)
ggplot(iris, aes(x = Species, y = Petal.Width, fill = Species)) +
geom_half_dotplot(width = .1)
ggplot(iris, aes(x = Species, y = Petal.Width, fill = Species)) +
geom_half_dotplot(bins=10)
ggplot(iris, aes(x = Species, y = Petal.Width, fill = Species)) +
geom_half_dotplot(stackratio=.5)
ggplot(iris, aes(x = Species, y = Petal.Width, fill = Species)) +
geom_half_dotplot(stackratio = .5, method = "histodot")
ggplot(iris, aes(x = Species, y = Petal.Width, fill = Species)) +
geom_half_point()
ggplot(iris, aes(x = Species, y = Petal.Width, fill = Species)) +
geom_half_point()
#' Points with jitter for half geoms.
#'
#' @inheritParams ggplot2::geom_point
#' @param side The side on which to draw the half violin plot. "l" for left, "r" for right, defaults to "l".
#' @param transformation A `Position` object to calculate the transformation of the points. Defaults to `ggplot2::PositionJitter`.
#' @param transformation_params A `list` containing named parameter values for the `transformation` object. Defaults to `list(width = NULL, height = NULL)`. For `ggplot2::PositionJitter`, keyword arguments can be `width`, `height` and `seed`.
#' @importFrom ggplot2 layer
#' @examples
#' @export
geom_half_point <- function(
mapping = NULL, data = NULL,
stat = "HalfPoint", position = "dodge2",
...,
side = "r",
transformation = PositionJitter,
transformation_params = list(width = NULL, height = NULL),
na.rm = FALSE,
show.legend = NA,
inherit.aes = TRUE) {
layer(
data = data,
mapping = mapping,
stat = stat,
geom = GeomHalfPoint,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(
side = side,
transformation = transformation,
transformation_params = transformation_params,
na.rm = na.rm,
...
)
)
}
#' @rdname gghalves-extensions
#' @format NULL
#' @usage NULL
#' @importFrom ggplot2 ggproto Geom GeomBoxplot GeomPoint
#' @export
GeomHalfPoint <- ggproto(
"GeomHalfPoint",
Geom,
required_aes = c("x", "y"),
non_missing_aes = c("size", "shape", "colour"),
default_aes = aes(
shape = 19,
colour = "black",
size = 1.5,
fill = NA,
alpha = NA,
stroke = 0.5
),
setup_data = function(data, params) {
x_data    <- GeomBoxplot$setup_data(data, NULL)
data$xmin <- x_data$xmin
data$xmax <- x_data$xmax
data
},
draw_group = function(
data, panel_params, coord, na.rm = FALSE, side = "r",
transformation = PositionJitter,
transformation_params = list(width = NULL, height = NULL)) {
if (is.character(data$shape)) {
data$shape <- translate_shape_string(data$shape)
}
xrange <- data$xmax - data$xmin
x_add  <- (xrange / 4) * switch((side == "r") + 1, -1, 1)
data$x <- data$x + x_add
# Add Position Transformation
transformation_df <- data.frame(
x     = data$x,
y     = data$point_y[[1]],
PANEL = 1,
group = -1
)
if (is(transformation, "PositionJitter")) {
transformation_params$width  <- transformation_params$width %||% xrange / 8
transformation_params$height <- transformation_params$height %||%
ggplot2::resolution(data$point_y[[1]], zero = FALSE) * 0.4
}
trans_positions <- transformation$compute_layer(
transformation_df,
transformation_params
)
if (length(unique(trans_positions$x)) > 1L) {
if (side == "r") {
trans_positions$x <- (data$xmax - data$x) * (
trans_positions$x - min(trans_positions$x)) / (
max(trans_positions$x) - min(trans_positions$x)) + data$x #- 0.045
} else {
trans_positions$x <- (data$x - data$xmin) * (
trans_positions$x - min(trans_positions$x)) / (
max(trans_positions$x) - min(trans_positions$x)) + data$x #+ 0.045
}
} #TODO parameterize left/right-shift
point_df <- data.frame(
colour = data$colour,
shape  = data$shape,
x      = trans_positions$x,
y      = trans_positions$y,
PANEL  = data$PANEL,
group  = data$group,
size   = data$size,
fill   = data$fill,
alpha  = data$alpha,
stroke = data$stroke
)
GeomPoint$draw_panel(point_df, panel_params, coord)
}
)
ggplot(iris, aes(x = Species, y = Petal.Width, fill = Species)) +
geom_half_point()
library(ggplot2)
library(ggplot2)
library(grid)
devtools::load_all("D:/onedrive/github/ggpol")
ggplot(iris, aes(x = Species, y = Petal.Width, fill = Species)) +
geom_half_point()
devtools::load_all("D:/onedrive/github/gghalves")
ggplot(iris, aes(x = Species, y = Petal.Width, fill = Species)) +
geom_half_point()
ggplot(iris, aes(x = Species, y = Petal.Width, fill = Species)) +
geom_half_point(side = "l")
ggplot(iris, aes(x = Species, y = Petal.Width, fill = Species)) +
geom_half_violin()
ggplot(iris, aes(x = Species, y = Petal.Width, fill = Species)) +
geom_half_violin(side = "r")
roxygen2::roxygenize("D:/onedrive/github/gghalves")
devtools::release("D:/onedrive/github/gghalves")
install.packages("root")
setwd("D:/onedrive/github/gghalves")
devtools::load_all()
devtools::release()
devtools::release()
devtools::check_win_release()
