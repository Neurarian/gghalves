#'   theme_minimal()
#' @export
#' @references Hintze, J. L., Nelson, R. D. (1998) Violin Plots: A Box
#' Plot-Density Trace Synergism. The American Statistician 52, 181-184.
geom_half_violin <- function(
mapping = NULL, data = NULL,
stat = "half_ydensity", position = "dodge",
...,
side = "l",
nudge = 0,
draw_quantiles = NULL,
trim = TRUE,
scale = "area",
na.rm = FALSE,
show.legend = NA,
inherit.aes = TRUE) {
layer(
data = data,
mapping = mapping,
stat = stat,
geom = GeomHalfViolin,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(
side = side,
nudge = nudge,
trim = trim,
scale = scale,
draw_quantiles = draw_quantiles,
na.rm = na.rm,
...
)
)
}
#' @rdname gghalves-extensions
#' @format NULL
#' @usage NULL
#' @importFrom ggplot2 ggproto GeomViolin GeomBoxplot GeomPolygon
#' @export
GeomHalfViolin <- ggproto(
"GeomHalfViolin", GeomViolin,
default_aes = ggplot2:::modify_list(aes(split = NA), GeomViolin$default_aes),
setup_data = function(data, params) {
x_data    <- GeomBoxplot$setup_data(data, NULL)
data$xmin <- x_data$xmin
data$xmax <- x_data$xmax
data
},
setup_params = function(data, params) {
if ("split" %in% colnames(data)) {
stopifnot(length(unique(data$split)) == 2)
params$side <- rep(c("l", "r"), max(data$group) / 2)
} else {
params$side <- rep(params$side,
ceiling(length(unique(data$group))/length(params$side)))
}
params
},
draw_group = function(self, data, side = "l", nudge = 0, ..., draw_quantiles = NULL) {
# Find the points for the line to go all the way around
if (length(side) == 1) {
side <- rep(side, data$group[1])
}
if (side[unique(data$group)] == "l") {
data <- transform(
data,
xminv = x + violinwidth * (xmin - x) - nudge,
xmaxv = x - nudge
)
} else {
data <- transform(
data,
xminv = x + nudge,
xmaxv = x + violinwidth * (xmax - x) + nudge
)
}
# Make sure it's sorted properly to draw the outline
newdata <- rbind(
transform(data, x = xminv)[order(data$y), ],
transform(data, x = xmaxv)[order(data$y, decreasing = TRUE), ]
)
# Close the polygon: set first and last point the same
# Needed for coord_polar and such
newdata <- rbind(newdata, newdata[1,])
# Draw quantiles if requested, so long as there is non-zero y range
if (length(draw_quantiles) > 0 & !scales::zero_range(range(data$y))) {
stopifnot(all(draw_quantiles >= 0), all(draw_quantiles <= 1))
# Compute the quantile segments and combine with existing aesthetics
quantiles <- ggplot2:::create_quantile_segment_frame(data, draw_quantiles)
aesthetics <- data[
rep(1, nrow(quantiles)),
setdiff(names(data), c("x", "y", "group")),
drop = FALSE
]
aesthetics$alpha <- rep(1, nrow(quantiles))
both <- cbind(quantiles, aesthetics)
both <- both[!is.na(both$group), , drop = FALSE]
quantile_grob <- if (nrow(both) == 0) {
zeroGrob()
} else {
GeomPath$draw_panel(both, ...)
}
ggplot2:::ggname("geom_half_violin", grobTree(
GeomPolygon$draw_panel(newdata, ...),
quantile_grob)
)
} else {
ggplot2:::ggname("geom_half_violin", GeomPolygon$draw_panel(newdata, ...))
}
}
)
ggplot() +
geom_half_violin(
data = ToothGrowth,
aes(x = as.factor(dose), y = len, split = supp, fill = supp),
position = "identity"
) +
theme_minimal()
library(ggforce)
install.packages("ggforce")
ggforce::geom_sina
ggforce::geom_sina
ggplot(midwest, aes(state, area)) +
geom_violin() +
geom_sina()
library(ggforce)
ggplot(midwest, aes(state, area)) +
geom_violin() +
geom_sina()
ggplot(iris, aes(y = Sepal.Width)) +
geom_half_boxplot() +
geom_half_point_panel(aes(x = 0.5, color = Species), range_scale = .5) +
theme_classic()
install.packages('roxygen2')
install.packages("roxygen2")
install.packages("roxygen2")
install.packages("roxygen2")
gghalves
library(roxygen2)
library(devtools)
devtools::load_all("C:\\Users\\pnl0ph56\\Documents\\gghalves")
devtools::load_all("C:\\Users\\pnl0ph56\\Documents\\gghalves")
roxygen2::roxygenize()
library(devtools)
devtools::load_all("C:\\Users\\pnl0ph56\\Documents\\gghalves")
roxygen2::roxygenize()
install.packages("rlang")
install.packages("rlang")
devtools::load_all("C:\\Users\\pnl0ph56\\Documents\\gghalves")
roxygen2::roxygenize()
library(ggplot2)
library(dplyr)
library(devtools)
library(ggforce)
devtools::load_all("C:\\Users\\pnl0ph56\\Documents\\gghalves")
roxygen2::roxygenize()
sessionInfo()
library(rlang)
detach("package:rlang", unload = TRUE)
install.packages("rlang")
install.packages("rlang")
devtools::load_all("C:\\Users\\pnl0ph56\\Documents\\gghalves")
roxygen2::roxygenize()
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
devtools::load_all("C:\\Users\\pnl0ph56\\Documents\\gghalves")
roxygen2::roxygenize()
setwd("C:\\Users\\pnl0ph56\\Documents\\gghalves")
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::check_win_devel()
install.packages("usethis")
install.packages("usethis")
usethis::use_github_action("check-standard")
a
a
library(usethis)
?usethis::github_actions
?usethis::use_github_action
usethis::use_github_action_check_standard(
save_as = "R-CMD-check.yaml",
ref = NULL,
ignore = TRUE,
open = FALSE
)
usethis::use_github_action_check_standard(
save_as = "R-CMD-check.yaml",
ref = NULL,
ignore = TRUE,
open = FALSE
)
.rs.restartR()
usethis::use_github_action_check_standard(
save_as = "R-CMD-check.yaml",
ref = NULL,
ignore = TRUE,
open = FALSE
)
?geom_boxplot
?geom_half_boxplot
?gghalves::geom_half_boxplot
devtools::load_all("C:\\Users\\pnl0ph56\\Documents\\gghalves")
?geom_half_boxplot
setwd("C:\\Users\\pnl0ph56\\Documents\\gghalves")
roxygen2::roxygenize()
setwd("C:\\Users\\pnl0ph56\\Documents\\gghalves")
roxygen2::roxygenize()
devtools::load_all("C:\\Users\\pnl0ph56\\Documents\\gghalves")
devtools::release()
# install.packages("ggpol")
library(ggpol)
install.packages("ggpol")
# install.packages("ggpol")
library(ggpol)
rb = data.frame(
flag = factor( c('red','orange','yellow',
'green','blue','purple')),
seats = c(200, 46, 92, 80, 153, 69),
colors = c('red','orange','yellow',
'green','blue','purple')
)
ggplot(rb) +
geom_parliament(aes(seats = seats,
fill = flag),
color = "black") +
scale_fill_manual(values = rb$colors,
labels = rb$flag) +
labs(title = "\nParliamentary diagram {ggpol} #PrideFlag")+
coord_fixed() +
theme(
text = element_text(family = "Rubik"),
plot.title = element_text(size = 14,
hjust = 0.5
),
panel.grid.major = element_line(linetype = "blank"),
panel.grid.minor = element_line(linetype = "blank"),
legend.text = element_text(colour = "white"),
legend.title = element_markdown(size = 12,
colour = "white"),
panel.background = element_rect(fill = "gray0"),
plot.background = element_rect(fill = "gray0"),
legend.background = element_rect(fill = "gray0"),
legend.position = "bottom", legend.direction = "horizontal",
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank()
)
library(ggplot2)
rb = data.frame(
flag = factor( c('red','orange','yellow',
'green','blue','purple')),
seats = c(200, 46, 92, 80, 153, 69),
colors = c('red','orange','yellow',
'green','blue','purple')
)
ggplot(rb) +
geom_parliament(aes(seats = seats,
fill = flag),
color = "black") +
scale_fill_manual(values = rb$colors,
labels = rb$flag) +
labs(title = "\nParliamentary diagram {ggpol} #PrideFlag")+
coord_fixed() +
theme(
text = element_text(family = "Rubik"),
plot.title = element_text(size = 14,
hjust = 0.5
),
panel.grid.major = element_line(linetype = "blank"),
panel.grid.minor = element_line(linetype = "blank"),
legend.text = element_text(colour = "white"),
legend.title = element_markdown(size = 12,
colour = "white"),
panel.background = element_rect(fill = "gray0"),
plot.background = element_rect(fill = "gray0"),
legend.background = element_rect(fill = "gray0"),
legend.position = "bottom", legend.direction = "horizontal",
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank()
)
install.packages("ggtext")
library(ggplot2)
rb = data.frame(
flag = factor( c('red','orange','yellow',
'green','blue','purple')),
seats = c(200, 46, 92, 80, 153, 69),
colors = c('red','orange','yellow',
'green','blue','purple')
)
ggplot(rb) +
geom_parliament(aes(seats = seats,
fill = flag),
color = "black") +
scale_fill_manual(values = rb$colors,
labels = rb$flag) +
labs(title = "\nParliamentary diagram {ggpol} #PrideFlag")+
coord_fixed() +
theme(
text = element_text(family = "Rubik"),
plot.title = element_text(size = 14,
hjust = 0.5
),
panel.grid.major = element_line(linetype = "blank"),
panel.grid.minor = element_line(linetype = "blank"),
legend.text = element_text(colour = "white"),
legend.title = element_markdown(size = 12,
colour = "white"),
panel.background = element_rect(fill = "gray0"),
plot.background = element_rect(fill = "gray0"),
legend.background = element_rect(fill = "gray0"),
legend.position = "bottom", legend.direction = "horizontal",
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank()
)
library(ggtext)
rb = data.frame(
flag = factor( c('red','orange','yellow',
'green','blue','purple')),
seats = c(200, 46, 92, 80, 153, 69),
colors = c('red','orange','yellow',
'green','blue','purple')
)
ggplot(rb) +
geom_parliament(aes(seats = seats,
fill = flag),
color = "black") +
scale_fill_manual(values = rb$colors,
labels = rb$flag) +
labs(title = "\nParliamentary diagram {ggpol} #PrideFlag")+
coord_fixed() +
theme(
text = element_text(family = "Rubik"),
plot.title = element_text(size = 14,
hjust = 0.5
),
panel.grid.major = element_line(linetype = "blank"),
panel.grid.minor = element_line(linetype = "blank"),
legend.text = element_text(colour = "white"),
legend.title = element_markdown(size = 12,
colour = "white"),
panel.background = element_rect(fill = "gray0"),
plot.background = element_rect(fill = "gray0"),
legend.background = element_rect(fill = "gray0"),
legend.position = "bottom", legend.direction = "horizontal",
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank()
)
p <- ggplot(rb) +
geom_parliament(aes(seats = seats,
fill = flag),
color = "black") +
scale_fill_manual(values = rb$colors,
labels = rb$flag) +
labs(title = "\nParliamentary diagram {ggpol} #PrideFlag")+
coord_fixed() +
theme(
text = element_text(family = "Rubik"),
plot.title = element_text(size = 14,
hjust = 0.5
),
panel.grid.major = element_line(linetype = "blank"),
panel.grid.minor = element_line(linetype = "blank"),
legend.text = element_text(colour = "white"),
legend.title = element_markdown(size = 12,
colour = "white"),
panel.background = element_rect(fill = "gray0"),
plot.background = element_rect(fill = "gray0"),
legend.background = element_rect(fill = "gray0"),
legend.position = "bottom", legend.direction = "horizontal",
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank()
)
ggsave("test1.png", p)
install.packages("ggdark")
# install.packages("ggpol")
library(ggpol)
library(ggplot2)
library(ggtext)
rb = data.frame(
flag = factor( c('red','orange','yellow',
'green','blue','purple')),
seats = c(200, 46, 92, 80, 153, 69),
colors = c('red','orange','yellow',
'green','blue','purple')
)
p <- ggplot(rb) +
geom_parliament(aes(seats = seats,
fill = flag),
color = "black") +
scale_fill_manual(values = rb$colors,
labels = rb$flag) +
labs(title = "\nParliamentary diagram {ggpol} #PrideFlag")+
coord_fixed() +
theme(
text = element_text(family = "Rubik"),
plot.title = element_text(size = 14,
hjust = 0.5
),
panel.grid.major = element_line(linetype = "blank"),
panel.grid.minor = element_line(linetype = "blank"),
legend.text = element_text(colour = "white"),
legend.title = element_markdown(size = 12,
colour = "white"),
panel.background = element_rect(fill = "gray0"),
plot.background = element_rect(fill = "gray0"),
legend.background = element_rect(fill = "gray0"),
legend.position = "bottom", legend.direction = "horizontal",
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank()
)
ggsave("test1.png", p)
p <- ggplot(rb) +
geom_parliament(aes(seats = seats,
fill = flag),
color = "black") +
scale_fill_manual(values = rb$colors,
labels = rb$flag) +
labs(title = "\nParliamentary diagram {ggpol} #PrideFlag")+
coord_fixed() +
theme(
text = element_text(family = "Rubik"),
plot.title = element_text(size = 14,
hjust = 0.5
),
panel.grid.major = element_line(linetype = "blank"),
panel.grid.minor = element_line(linetype = "blank"),
legend.text = element_text(colour = "white"),
legend.title = element_markdown(size = 12,
colour = "white"),
panel.background = element_rect(fill = "gray0"),
plot.background = element_rect(fill = "gray0"),
legend.background = element_rect(fill = "gray0"),
legend.position = "bottom", legend.direction = "horizontal",
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank()
) +
ggdark::dark_mode()
p <- ggplot(rb) +
geom_parliament(aes(seats = seats,
fill = flag),
color = "black") +
scale_fill_manual(values = rb$colors,
labels = rb$flag) +
labs(title = "\nParliamentary diagram {ggpol} #PrideFlag")+
coord_fixed() +
theme(
text = element_text(family = "Rubik"),
plot.title = element_text(size = 14,
hjust = 0.5
),
panel.grid.major = element_line(linetype = "blank"),
panel.grid.minor = element_line(linetype = "blank"),
legend.text = element_text(colour = "white"),
legend.title = element_markdown(size = 12,
colour = "white"),
panel.background = element_rect(fill = "gray0"),
plot.background = element_rect(fill = "gray0"),
# legend.background = element_rect(fill = "gray0"),
legend.position = "bottom", legend.direction = "horizontal",
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank()
) +
ggdark::dark_mode()
ggsave("test1.png", p)
p
p <- ggplot(rb) +
geom_parliament(aes(seats = seats,
fill = flag),
color = "black") +
scale_fill_manual(values = rb$colors,
labels = rb$flag) +
labs(title = "\nParliamentary diagram {ggpol} #PrideFlag")+
coord_fixed() +
theme(
text = element_text(family = "Rubik"),
plot.title = element_text(size = 14,
hjust = 0.5
),
panel.grid.major = element_line(linetype = "blank"),
panel.grid.minor = element_line(linetype = "blank"),
legend.text = element_text(colour = "white"),
legend.title = element_markdown(size = 12,
colour = "white"),
panel.background = element_rect(fill = "gray0"),
plot.background = element_rect(fill = "gray0"),
# legend.background = element_rect(fill = "gray0"),
legend.position = "bottom", legend.direction = "horizontal",
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank()
)
ggsave("test1.png", p)
p
p <- ggplot(rb) +
geom_parliament(aes(seats = seats,
fill = flag),
color = "black") +
scale_fill_manual(values = rb$colors,
labels = rb$flag) +
labs(title = "\nParliamentary diagram {ggpol} #PrideFlag") +
coord_fixed() +
ggdark::dark_mode()
p
